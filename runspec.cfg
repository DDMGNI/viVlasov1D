

[grid]

nt   = integer(default=100)            # number of timesteps
nx   = integer(default=101)            # number of spatial  grid points
nv   = integer(default=101)            # number of velocity grid points

ht   = float(default=0.01)             # length of timestep

L    = float(default=0.0)              # spatial domain
vmin = float(default=-5.0)             # velocity domain
vmax = float(default=+5.0)


[solver]

petsc_ksp_type     = string(default='gmres')     # PETSc linear solver type
petsc_ksp_rtol     = float(default=1E-7)         # PETSc linear solver relative convergence tolerance
                                                 # (relative decrease in the residual norm)
petsc_ksp_atol     = float(default=1E-10)        # PETSc linear solver absolute convergence tolerance
                                                 # (absolute size of the residual norm)
petsc_ksp_max_iter = integer(default=1000)       # PETSc linear solver maximum number of iterations

petsc_pc_type      = string(default='none')      # PETSc preconditioner type

petsc_snes_rtol = float(default=1E-20)		# PETSC nonlinear solver absolute convergence tolerance
petsc_snes_atol = float(default=1E-12)		# PETSC nonlinear solver relative convergence tolerance
petsc_snes_stol = float(default=1E-14)		# PETSC nonlinear solver convergence tolerance in terms
                                            # of the norm of the change in the solution between steps
petsc_snes_max_iter = integer(default=20)	# PETSC nonlinear solver maximum number of iterations

coll_freq    = float(default=0.0)           # collision frequency


[initial_data]

mass         = float(default=1.0)           # particle mass, not implemented yet
charge       = float(default=1.0)           # particle charge

distribution = float(default=0.0)           # constant distribution function
density      = float(default=1.0)           # constant density
temperature  = float(default=1.0)           # constant temperature
potential    = float(default=0.0)           # constant potential

distribution_file = string(default=None)    # load distribution profile from file
density_file      = string(default=None)    # load density      profile from file
temperature_file  = string(default=None)    # load temperature  profile from file
potential_file    = string(default=None)    # load potential    profile from file

# Here, you can specify Python modules that contain functions are called by
# distribution(grid), density(grid), temperature(grid), potential(grid)
# which return a NumPy array of size (grid.nx, grid.nv) or (grid.nx).
# Just give the module name (without the trailing .py).
 
distribution_python = string(default=None)  # calculate distribution profile
density_python      = string(default=None)  # calculate density      profile
temperature_python  = string(default=None)  # calculate temperature  profile
potential_python    = string(default=None)  # calculate potential    profile


[io]

hdf5_input  = string(default=None)         # restart run from hdf5 file, not implemented yet
hdf5_output = string(default=None)         # write data to hdf5 file
nsave       = integer(default=1)           # save every nsave'th timestep

