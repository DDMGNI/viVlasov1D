

[grid]

nt   = integer(default=100)            # number of timesteps
nx   = integer(default=101)            # number of spatial  grid points
nv   = integer(default=101)            # number of velocity grid points

ht   = float(default=0.01)             # length of timestep

L    = float(default=0.0)              # spatial domain
vmin = float(default=-5.0)             # velocity domain
vmax = float(default=+5.0)

boundary_condition = string(default=None)      # which boundary conditions to use: None=free, dirichlet, neumann, weak


[solver]

solver_module  = string(default='vlasov.vi.sbs_sym_arakawa.scipy_sparse')   # module containing the Solver class
solver_method  = string(default='newton')                                   # default iteration scheme for nonlinear implicit solver
                                                                            # newton, full, delta
petsc_method   = string(default='matrix_free')                              # PETSc solver method
                                                                            # direct, iterative, matrix_free
petsc_ksp_type = string(default='gmres')                                    # PETSc solver type
petsc_pc_type  = string(default='none')                                     # PETSc preconditioner type
petsc_residual = float(default=1E-7)                                        # residual for the iterative solver

poisson_const  = float(default=1.0)     # constant in the Poisson equation, e.g. gravitational constant



[initial_data]

evolve       = boolean(default=False)       # evolve the initial state backwards using a Euler-Arakawa scheme

mass         = float(default=1.0)           # particle mass

distribution = float(default=0.0)           # constant distribution function
density      = float(default=1.0)           # constant density
temperature  = float(default=1.0)           # constant temperature
potential    = float(default=0.0)           # constant potential

distribution_file = string(default=None)    # load distribution profile from file
density_file      = string(default=None)    # load density      profile from file
temperature_file  = string(default=None)    # load temperature  profile from file
potential_file    = string(default=None)    # load potential    profile from file

# Here, you can specify Python modules that contain functions are called by
# distribution(grid), density(grid), temperature(grid), potential(grid)
# which return a NumPy array of size (grid.nx, grid.nv) or (grid.nx).
# Just give the module name (without the trailing .py).
 
distribution_python = string(default=None)  # calculate distribution profile
density_python      = string(default=None)  # calculate density      profile
temperature_python  = string(default=None)  # calculate temperature  profile
potential_python    = string(default=None)  # calculate potential    profile


[io]

hdf5_input  = string(default=None)         # restart run from hdf5 file, not implemented yet
hdf5_output = string(default=None)         # write data to hdf5 file
nsave       = integer(default=1)           # save every nsave'th timestep


[mode]

interactive = boolean(default=False)       # run in interactive or batch mode


[plot]

nplot       = integer(default=1)           # plot every nplot'th timestep
ntime       = integer(default=0)           # plot ntime timesteps in timetraces

